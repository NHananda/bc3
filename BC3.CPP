#include <stdio.h>
#include <time.h>



#include <bc3.h>

u32 Tbl0[256],Tbl1[256],Tbl2[256],Tbl3[256];

static u8 SBox[256] = /* SBox_BC3 */
{
0xbb,0x8b,0x9e,0xdf,0x42,0xd8,0xf7,0x1f,0x52,0xd7,0x26,0x80,0x3e,0x20,0x17,0x5b,
0xf1,0x94,0x5e,0xee,0x78,0x91,0x7a,0x3c,0x62,0x53,0x24,0xf6,0xc2,0x97,0xe3,0x8d,
0xc4,0xfc,0x5f,0xad,0x40,0x2b,0xa4,0x16,0x4c,0x50,0xbc,0x90,0xca,0x60,0x96,0x50,
0x81,0xba,0x4e,0x10,0xc0,0xd5,0x49,0xc3,0x48,0x3d,0xf0,0xb0,0xde,0x76,0xdb,0xf4,
0xe6,0xcd,0x56,0xed,0x6c,0xf8,0xb6,0xc0,0x36,0x82,0x2e,0x7c,0xda,0x4a,0x92,0xdd,
0x7f,0xd4,0x99,0xb8,0x71,0x28,0xe9,0x33,0xac,0x68,0x66,0x9f,0x1b,0x7d,0x88,0x00,
0xa8,0x43,0xc1,0x1c,0x34,0xfd,0x59,0x8f,0xcf,0xd9,0xf0,0xc5,0xbd,0x46,0x31,0x14,
0x1e,0xf3,0xc6,0x58,0x3b,0x87,0xe5,0x6e,0x6f,0xdc,0xa9,0xb4,0x21,0x5d,0x30,0x39,
0x9d,0xcc,0x6b,0x23,0xd0,0x65,0x98,0x9a,0x73,0x77,0x7b,0x69,0x70,0xd0,0x37,0x64,
0xea,0x57,0xe1,0xeb,0x8a,0xce,0xe0,0xf5,0x4d,0xe4,0x5c,0x45,0x54,0xab,0x83,0x9c,
0x8e,0x2f,0x40,0x74,0xcb,0x70,0x55,0x2d,0x86,0xaa,0xb3,0xa3,0x29,0xec,0x51,0xe0,
0xfb,0x8c,0xe2,0xd6,0x12,0xe8,0x10,0xa5,0xa0,0xd2,0xef,0x9b,0x93,0x11,0x35,0xd3,
0x1d,0x79,0x1a,0xb5,0x25,0x18,0xb7,0xaf,0x2c,0x4f,0xff,0xa2,0xc8,0x13,0x22,0x60,
0xe7,0xbf,0x44,0x3a,0xc7,0x41,0xbe,0xd1,0x15,0xfa,0x6a,0x67,0x95,0x80,0xb2,0xa1,
0x19,0xae,0x4b,0x7e,0xc9,0xfe,0x85,0xb0,0x38,0x5a,0x27,0xa0,0x89,0x47,0x84,0x75,
0xb1,0xa6,0x3f,0x30,0x20,0x63,0x72,0xf2,0xa7,0x2a,0xf9,0x61,0x32,0x6d,0xb9,0x90
};

void BC3_gen_tables( void )
{
int i;
u8 x, y;
u8 pow[256];
u8 log[256];

/* Buat tabel perkalian dengan MDS */

for( i = 0; i < 256; i++ )
{
x = (unsigned char) SBox[i]; y = XTIME( x );

Tbl0[i] = (u32) ( x ^ y ) ^
( (u32) x << 8 ) ^
( (u32) x << 16 ) ^
( (u32) y << 24 );

Tbl0[i] &= 0xFFFFFFFF;

Tbl1[i] = ROTR32_8( Tbl0[i] );
Tbl2[i] = ROTR32_8( Tbl1[i] );
Tbl3[i] = ROTR32_8( Tbl2[i] );

}

}

void BC3_keysch(u32 ku[4])
{
int i; /* ku[0] || ku[1] || ku[2] || ku[3] */
u32 KA,KB,KC,KD,KE,KF,KG;

XL = ku[0]^ku[2]; XR = ku[1]^ku[3];
BC3_FROUND(XL,XR,YL,YR,C1);
BC3_FROUND(YL,YR,XL,XR,C2);
XL ^= ku[0]; XR ^= ku[1];
BC3_FROUND(XL,XR,YL,YR,C3);
BC3_FROUND(YL,YR,XL,XR,C4);
XL ^= ku[2]; XR ^= ku[3];
KA = XL ; KB = XR;
BC3_FROUND(XL,XR,YL,YR,C5);
BC3_FROUND(YL,YR,XL,XR,C6);
KC = XL; KD = XR;

KE = KA | KB ^ KC;
KF = KA & KB ^ KD;
KG = KC & KD ^ KA;

WK[1]= KE&KF^KG;
WK[2]= KF|KG^KE;

SK[1] = KE&WK[2]^KF;
SK[2] = KE&KF^WK[1];
SK[3] = WK[1]|WK[2]^SK[2];
SK[4] = SK[1]|WK[2]^SK[3];
KFA[1]= C1&KE^SK[4];
SK[5] = C2&WK[2]^SK[3];
SK[6] = SK[1]|SK[2]^SK[5];
SK[7] = SK[6]&WK[2]^KFA[1];
KFA[2]= SK[1]&SK[5]^SK[6];
SK[8] = C3&SK[3]^SK[7];
SK[9] = ROTR32(SK[5],1)^SK[3];

SK[10]= SK[8]&SK[4]^SK[5];
SK[11]= SK[3]&SK[5]^SK[6];
WK[3] = SK[9]&SK[4]^SK[6];
WK[4] = SK[2]&SK[8]^SK[9];
}

void BC3_encrypt(u32 XL, u32 XR)
{/* input ronde = XL||XR */
u32 a,b,c,d;
int i;

XL ^= WK[1]; XR ^= WK[2];

BC3_FROUND(XL,XR,YL,YR,SK[1]); /*ronde 1*/
BC3_FROUND(YL,YR,XL,XR,SK[2]); /*ronde 2*/
BC3_FROUND(XL,XR,YL,YR,SK[3]); /*ronde 3*/
BC3_FROUND(YL,YR,XL,XR,SK[4]); /*ronde 4 keluaran = XR||XL*/

BC3_FAR(XL,XR,YL,YR);

BC3_FROUND(YL,YR,XL,XR,SK[5]); /*ronde 5*/
BC3_FROUND(XL,XR,YL,YR,SK[6]); /*ronde 6*/
BC3_FROUND(YL,YR,XL,XR,SK[7]); /*ronde 7*/

BC3_FAinverse(XL,XR,YL,YR);

BC3_FROUND(YL,YR,XL,XR,SK[8]); /*ronde 8*/
BC3_FROUND(XL,XR,YL,YR,SK[9]); /*ronde 9*/
BC3_FROUND(YL,YR,XL,XR,SK[10]); /*ronde 10*/

/*ronde terakhir*/

YR = XR ^ WK[4];
YL = Tbl0[ ( u8 ) ( XR >> 24 ) ] ^ Tbl1[ ( u8 ) ( XR >> 16 ) ] ^ Tbl2[ ( u8 ) ( XR >> 8 ) ] ^ Tbl3[ ( u8 ) ( XR ) ] ^ SK[11] ^ WK[3] ^ XL;
}

/* Alogoritma enkripsi = dekripsi hanya urutan subkey saling berkebalikan
Dipisahkan pembuatannya untuk mengejar kecepatan (meskipun mungkin selisih sedikit) */

void BC3_decrypt( u32 XL, u32 XR)
{
u32 buf; /* input ronde = XL||XR */
int i;
XL ^= WK[3]; XR ^= WK[4];

BC3_FROUND(XL,XR,YL,YR,SK[11]); /*ronde 1*/
BC3_FROUND(YL,YR,XL,XR,SK[10]); /*ronde 2*/
BC3_FROUND(XL,XR,YL,YR,SK[9]); /*ronde 3*/
BC3_FROUND(YL,YR,XL,XR,SK[8]); /*ronde 4 keluaran = XR||XL*/

BC3_FROUND(YL,YR,XL,XR,SK[7]); /*ronde 5*/
BC3_FROUND(XL,XR,YL,YR,SK[6]); /*ronde 6*/
BC3_FROUND(YL,YR,XL,XR,SK[5]); /*ronde 7*/

BC3_FROUND(YL,YR,XL,XR,SK[4]); /*ronde 8*/
BC3_FROUND(XL,XR,YL,YR,SK[3]); /*ronde 9*/
BC3_FROUND(YL,YR,XL,XR,SK[2]); /*ronde 10*/

/*ronde terakhir*/

YR = XR ^ WK[2];
YL = Tbl0[ ( u8 ) ( XR >> 24 ) ] ^ Tbl1[ ( u8 ) ( XR >> 16 ) ] ^ Tbl2[ ( u8 ) ( XR >> 8 ) ] ^ Tbl3[ ( u8 ) ( XR ) ] ^SK[1]^ WK[1] ^ XL;
}

